import math

import PyQt6.QtWidgets as QtWidgets
import random
from dataclasses import dataclass
from collections import namedtuple
from math import pi, sin, cos
from typing import TYPE_CHECKING
from OpenGL.GL import *
from lib.bw_types import BWMatrix, decompose
from lib.xmltypes.bw1 import SceneryCluster, SceneryClusterBase

if TYPE_CHECKING:
    import bw_editor
    import widgets.menu.plugin as plugin
    import bw_widgets
    from lib.BattalionXMLLib import BattalionObject, BattalionLevelFile


RNG_FLOATS = [
    0.44720458984375,0.74212646484375,0.711700439453125,0.3236083984375,0.148712158203125,0.328216552734375,0.12908935546875,0.3133544921875,0.955291748046875,0.369537353515625,0.97088623046875,0.66748046875,0.29473876953125,0.129730224609375,0.180511474609375,0.227752685546875,0.001007080078125,0.903717041015625,0.8575439453125,0.617279052734375,0.8143310546875,0.51763916015625,0.757843017578125,0.740325927734375,0.88116455078125,0.8289794921875,0.793487548828125,0.282440185546875,0.254302978515625,0.22637939453125,0.53289794921875,0.21038818359375,
    0.3927001953125,0.1297607421875,0.700653076171875,0.27227783203125,0.661590576171875,0.490264892578125,0.6776123046875,0.49737548828125,0.832427978515625,0.290374755859375,0.0008544921875,0.69622802734375,0.5830078125,0.043731689453125,0.863800048828125,0.960601806640625,0.997283935546875,0.295257568359375,0.61602783203125,0.163604736328125,0.06549072265625,0.12109375,0.263397216796875,0.459503173828125,0.18408203125,0.62872314453125,0.967987060546875,0.783843994140625,0.655853271484375,0.456787109375,0.5482177734375,0.3533935546875,
    0.18975830078125,0.27520751953125,0.978668212890625,0.166259765625,0.401031494140625,0.285125732421875,0.89019775390625,0.501708984375,0.311126708984375,0.719024658203125,0.06988525390625,0.4202880859375,0.84783935546875,0.340545654296875,0.961151123046875,0.263763427734375,0.345123291015625,0.944610595703125,0.16357421875,0.155242919921875,0.043212890625,0.85736083984375,0.933013916015625,0.498992919921875,0.58856201171875,0.436279296875,0.681549072265625,0.480560302734375,0.533966064453125,0.57000732421875,0.47760009765625,0.56671142578125,
    0.83837890625,0.178466796875,0.545745849609375,0.00555419921875,0.367034912109375,0.712799072265625,0.766845703125,0.32635498046875,0.391387939453125,0.655487060546875,0.177978515625,0.83966064453125,0.0892333984375,0.020172119140625,0.472564697265625,0.137237548828125,0.044525146484375,0.851776123046875,0.50018310546875,0.592193603515625,0.74749755859375,0.7264404296875,0.766693115234375,0.858795166015625,0.0946044921875,0.25164794921875,0.934173583984375,0.372589111328125,0.888641357421875,0.5660400390625,0.321044921875,0.850341796875,
    0.33856201171875,0.83953857421875,0.401885986328125,0.7901611328125,0.559600830078125,0.773284912109375,0.30755615234375,0.9713134765625,0.073211669921875,0.099761962890625,0.32513427734375,0.954345703125,0.30718994140625,0.082611083984375,0.398040771484375,0.581024169921875,0.095489501953125,0.016754150390625,0.6258544921875,0.474456787109375,0.1783447265625,0.72833251953125,0.764434814453125,0.538909912109375,0.70220947265625,0.0748291015625,0.725860595703125,0.459930419921875,0.719879150390625,0.44488525390625,0.07855224609375,0.20428466796875,
    0.6903076171875,0.2584228515625,0.547088623046875,0.52008056640625,0.978729248046875,0.466583251953125,0.5123291015625,0.43658447265625,0.356597900390625,0.051849365234375,0.5113525390625,0.76434326171875,0.501708984375,0.527862548828125,0.737579345703125,0.595123291015625,0.498016357421875,0.439544677734375,0.54058837890625,0.802032470703125,0.33575439453125,0.863037109375,0.926239013671875,0.539337158203125,0.411376953125,0.90582275390625,0.056610107421875,0.742584228515625,0.027679443359375,0.20654296875,0.7501220703125,0.6285400390625,
    0.89361572265625,0.43511962890625,0.981353759765625,0.1953125,0.624420166015625,0.792694091796875,0.38116455078125,0.72216796875,0.241546630859375,0.511749267578125,0.73663330078125,0.2696533203125,0.67279052734375,0.355926513671875,0.491180419921875,0.179534912109375,0.252105712890625,0.120147705078125,0.244384765625,0.574920654296875,0.2197265625,0.13055419921875,0.252105712890625,0.860076904296875,0.22210693359375,0.74462890625,0.926422119140625,0.220550537109375,0.812042236328125,0.85101318359375,0.33575439453125,0.12310791015625,
    0.948486328125,0.36962890625,0.704681396484375,0.81585693359375,0.496673583984375,0.751617431640625,0.9140625,0.82806396484375,0.728057861328125,0.479461669921875,0.0009765625,0.47027587890625,0.8204345703125,0.566802978515625,0.658843994140625,0.334259033203125,0.357757568359375,0.058563232421875,0.73724365234375,0.793121337890625,0.83026123046875,0.5308837890625,0.742034912109375,0.501129150390625,0.1343994140625,0.59124755859375,0.335296630859375,0.893829345703125,0.072967529296875,0.3782958984375,0.83544921875,0.68798828125,
    0.85491943359375,0.06195068359375,0.717071533203125,0.3817138671875,0.595489501953125,0.343353271484375,0.11102294921875,0.7542724609375,0.816131591796875,0.954986572265625,0.30438232421875,0.3662109375,0.94464111328125,0.160491943359375,0.240570068359375,0.059295654296875,0.814971923828125,0.254791259765625,0.0191650390625,0.456634521484375,0.1673583984375,0.06402587890625,0.396026611328125,0.462493896484375,0.14825439453125,0.4456787109375,0.283233642578125,0.762420654296875,0.810455322265625,0.78839111328125,0.24920654296875,0.32318115234375,
    0.6129150390625,0.5120849609375,0.018524169921875,0.89288330078125,0.920867919921875,0.567901611328125,0.9720458984375,0.50079345703125,0.505767822265625,0.938323974609375,0.6468505859375,0.95745849609375,0.04541015625,0.136993408203125,0.236358642578125,0.354644775390625,0.623748779296875,0.708831787109375,0.09014892578125,0.565460205078125,0.23101806640625,0.72998046875,0.214080810546875,0.744171142578125,0.263671875,0.30792236328125,0.770233154296875,0.826324462890625,0.024505615234375,0.081298828125,0.5770263671875,0.0286865234375,
    0.22247314453125,0.72003173828125,0.609039306640625,0.349365234375,0.472808837890625,0.425262451171875,0.49713134765625,0.067626953125,0.796966552734375,0.429473876953125,0.02838134765625,0.2440185546875,0.12274169921875,0.496307373046875,0.646209716796875,0.220306396484375,0.784088134765625,0.420684814453125,0.9501953125,0.119598388671875,0.021240234375,0.52874755859375,0.196197509765625,0.346160888671875,0.48065185546875,0.177978515625,0.796295166015625,0.085540771484375,0.715118408203125,0.25701904296875,0.81890869140625,0.80450439453125,
    0.68359375,0.685791015625,0.488616943359375,0.75115966796875,0.251312255859375,0.915435791015625,0.686279296875,0.45477294921875,0.689727783203125,0.428436279296875,0.448974609375,0.22589111328125,0.1766357421875,0.238433837890625,0.470123291015625,0.656280517578125,0.295989990234375,0.390350341796875,0.59930419921875,0.119049072265625,0.53802490234375,0.4603271484375,0.342376708984375,0.268463134765625,0.7991943359375,0.05584716796875,0.361419677734375,0.540069580078125,0.882293701171875,0.3155517578125,0.974853515625,0.650634765625,
    0.99627685546875,0.40936279296875,0.657257080078125,0.0982666015625,0.256378173828125,0.038421630859375,0.53948974609375,0.6622314453125,0.184051513671875,0.935211181640625,0.90863037109375,0.903076171875,0.20709228515625,0.363372802734375,0.708099365234375,0.662567138671875,0.159454345703125,0.617828369140625,0.0374755859375,0.563812255859375,0.7813720703125,0.52471923828125,0.652618408203125,0.511077880859375,0.21929931640625,0.9415283203125,0.465606689453125,0.189910888671875,0.526031494140625,0.25689697265625,0.04486083984375,0.56707763671875,
    0.1605224609375,0.8907470703125,0.114959716796875,0.39068603515625,0.488006591796875,0.794219970703125,0.0567626953125,0.69000244140625,0.279937744140625,0.949798583984375,0.4073486328125,0.27557373046875,0.214111328125,0.871124267578125,0.360137939453125,0.239166259765625,0.374481201171875,0.103118896484375,0.26470947265625,0.453887939453125,0.75128173828125,0.721923828125,0.126922607421875,0.074005126953125,0.740966796875,0.83502197265625,0.108856201171875,0.035064697265625,0.646331787109375,0.0810546875,0.0289306640625,0.5538330078125,
    0.17633056640625,0.12994384765625,0.861724853515625,0.62841796875,0.946197509765625,0.182830810546875,0.23809814453125,0.5380859375,0.977386474609375,0.472198486328125,0.94512939453125,0.3433837890625,0.19769287109375,0.761688232421875,0.426239013671875,0.386077880859375,0.941070556640625,0.846221923828125,0.281005859375,0.789276123046875,0.44775390625,0.05194091796875,0.765289306640625,0.957244873046875,0.36419677734375,0.736328125,0.291168212890625,0.075531005859375,0.243194580078125,0.78802490234375,0.92706298828125,0.61090087890625,
    0.043701171875,0.126953125,0.897552490234375,0.81146240234375,0.630950927734375,0.204254150390625,0.08349609375,0.20648193359375,0.276397705078125,0.502410888671875,0.52197265625,0.10650634765625,0.1578369140625,0.035064697265625,0.906402587890625,0.103302001953125,0.859222412109375,0.847137451171875,0.08636474609375,0.569976806640625,0.87078857421875,0.5147705078125,0.567718505859375,0.160797119140625,0.0889892578125,0.64544677734375,0.012542724609375,0.311309814453125,0.316619873046875,0.3778076171875,0.7392578125,0.73828125,
    0.76263427734375,0.88177490234375,0.222442626953125,0.9398193359375,0.542266845703125,0.858489990234375,0.59295654296875,0.6951904296875,0.176971435546875,0.040435791015625,0.13787841796875,0.56494140625,0.09454345703125,0.691253662109375,0.800628662109375,0.390838623046875,0.128936767578125,0.105865478515625,0.6807861328125,0.795989990234375,0.0203857421875,0.11041259765625,0.534210205078125,0.684661865234375,0.91534423828125,0.5623779296875,0.272979736328125,0.742401123046875,0.866607666015625,0.85040283203125,0.46551513671875,0.93597412109375,
    0.3331298828125,0.3944091796875,0.836395263671875,0.01348876953125,0.680145263671875,0.145538330078125,0.7664794921875,0.00421142578125,0.679107666015625,0.086273193359375,0.7928466796875,0.71868896484375,0.0078125,0.730255126953125,0.108917236328125,0.248687744140625,0.750213623046875,0.622406005859375,0.06427001953125,0.467315673828125,0.89654541015625,0.8388671875,0.664764404296875,0.528839111328125,0.84326171875,0.48712158203125,0.072479248046875,0.368804931640625,0.893157958984375,0.205810546875,0.1058349609375,0.2039794921875,
    0.75518798828125,0.66485595703125,0.739410400390625,0.032470703125,0.044586181640625,0.065399169921875,0.60406494140625,0.133544921875,0.782806396484375,0.639923095703125,0.48687744140625,0.5677490234375,0.89764404296875,0.152069091796875,0.831268310546875,0.676849365234375,0.723052978515625,0.396759033203125,0.23681640625,0.583953857421875,0.499267578125,0.70013427734375,0.959381103515625,0.693328857421875,0.87274169921875,0.419677734375,0.411041259765625,0.190521240234375,0.396270751953125,0.44403076171875,0.66021728515625,0.54229736328125,
    0.02880859375,0.693115234375,0.931488037109375,0.99676513671875,0.635589599609375,0.618072509765625,0.105712890625,0.08319091796875,0.488067626953125,0.701385498046875,0.219970703125,0.11212158203125,0.7640380859375,0.956695556640625,0.967681884765625,0.675323486328125,0.047454833984375,0.428924560546875,0.19842529296875,0.145904541015625,0.82855224609375,0.6942138671875,0.418060302734375,0.178131103515625,0.0037841796875,0.36004638671875,0.288665771484375,0.207550048828125,0.375946044921875,0.5650634765625,0.128662109375,0.950927734375,
    0.15399169921875,0.47918701171875,0.412628173828125,0.9063720703125,0.453155517578125,0.803558349609375,0.27142333984375,0.8531494140625,0.794891357421875,0.270660400390625,0.99212646484375,0.351806640625,0.60699462890625,0.144134521484375,0.518157958984375,0.244110107421875,0.723419189453125,0.718902587890625,0.9490966796875,0.153167724609375,0.8843994140625,0.82110595703125,0.040802001953125,0.983245849609375,0.23638916015625,0.3082275390625,0.705352783203125,0.419891357421875,0.832183837890625,0.56890869140625,0.51116943359375,0.42987060546875,
    0.1307373046875,0.0230712890625,0.182830810546875,0.76129150390625,0.497283935546875,0.621856689453125,0.1011962890625,0.44342041015625,0.703277587890625,0.347747802734375,0.8033447265625,0.28680419921875,0.426513671875,0.714385986328125,0.482696533203125,0.383209228515625,0.750946044921875,0.266693115234375,0.48883056640625,0.605743408203125,0.66680908203125,0.080810546875,0.827606201171875,0.108673095703125,0.570556640625,0.26422119140625,0.661102294921875,0.827545166015625,0.764984130859375,0.45556640625,0.8077392578125,0.9791259765625,
    0.95904541015625,0.32476806640625,0.242095947265625,0.5615234375,0.767974853515625,0.072967529296875,0.59503173828125,0.85400390625,0.213226318359375,0.932647705078125,0.65362548828125,0.9171142578125,0.22259521484375,0.667449951171875,0.861297607421875,0.092620849609375,0.130035400390625,0.072296142578125,0.817626953125,0.503631591796875,0.17578125,0.47332763671875,0.778472900390625,0.554412841796875,0.00628662109375,0.22802734375,0.155914306640625,0.430511474609375,0.174346923828125,0.22503662109375,0.01837158203125,0.59869384765625,
    0.638916015625,0.38427734375,0.590423583984375,0.30706787109375,0.265228271484375,0.156890869140625,0.7529296875,0.08489990234375,0.324737548828125,0.025360107421875,0.54296875,0.24273681640625,0.9952392578125,0.003326416015625,0.653961181640625,0.372344970703125,0.860687255859375,0.135711669921875,0.93548583984375,0.846832275390625,0.41131591796875,0.9986572265625,0.893402099609375,0.320465087890625,0.5435791015625,0.19964599609375,0.189788818359375,0.228790283203125,0.060272216796875,0.8773193359375,0.14306640625,0.28857421875,
    0.17034912109375,0.20159912109375,0.227813720703125,0.9979248046875,0.989044189453125,0.873626708984375,0.57489013671875,0.1361083984375,0.037811279296875,0.625885009765625,0.47137451171875,0.263671875,0.74444580078125,0.722015380859375,0.860687255859375,0.222381591796875,0.942901611328125,0.456939697265625,0.8424072265625,0.635345458984375,0.3734130859375,0.65679931640625,0.172393798828125,0.406829833984375,0.18243408203125,0.1790771484375,0.762725830078125,0.222381591796875,0.422760009765625,0.41241455078125,0.18182373046875,0.04876708984375,
    0.5533447265625,0.7767333984375,0.154266357421875,0.63409423828125,0.939422607421875,0.223175048828125,0.0609130859375,0.00762939453125,0.352447509765625,0.734222412109375,0.4388427734375,0.97991943359375,0.47021484375,0.823516845703125,0.481475830078125,0.642730712890625,0.376678466796875,0.035980224609375,0.53839111328125,0.869171142578125,0.06207275390625,0.44775390625,0.615447998046875,0.813507080078125,0.9228515625,0.16632080078125,0.874725341796875,0.411285400390625,0.261810302734375,0.830322265625,0.1346435546875,0.8792724609375,
    0.78790283203125,0.10968017578125,0.369781494140625,0.215576171875,0.116363525390625,0.205535888671875,0.21099853515625,0.699462890625,0.268646240234375,0.350372314453125,0.44537353515625,0.3914794921875,0.17254638671875,0.307830810546875,0.516326904296875,0.633392333984375,0.162017822265625,0.872833251953125,0.0234375,0.548309326171875,0.477294921875,0.37152099609375,0.222564697265625,0.540496826171875,0.76483154296875,0.161376953125,0.525787353515625,0.795501708984375,0.577423095703125,0.13104248046875,0.00152587890625,0.78009033203125,
    0.8740234375,0.200439453125,0.874359130859375,0.74237060546875,0.519866943359375,0.820709228515625,0.025146484375,0.21160888671875,0.786407470703125,0.474334716796875,0.490966796875,0.49835205078125,0.8514404296875,0.174957275390625,0.965240478515625,0.194366455078125,0.298919677734375,0.967498779296875,0.29754638671875,0.672760009765625,0.61907958984375,0.4281005859375,0.993743896484375,0.587799072265625,0.7083740234375,0.16424560546875,0.715911865234375,0.375030517578125,0.369598388671875,0.3145751953125,0.782470703125,0.751220703125,
    0.81170654296875,0.04901123046875,0.667999267578125,0.2144775390625,0.149932861328125,0.068695068359375,0.50335693359375,0.5440673828125,0.905731201171875,0.106109619140625,0.57562255859375,0.300537109375,0.50689697265625,0.424896240234375,0.828216552734375,0.325653076171875,0.787384033203125,0.319976806640625,0.3607177734375,0.242523193359375,0.4874267578125,0.61749267578125,0.928985595703125,0.955413818359375,0.75347900390625,0.1749267578125,0.445098876953125,0.149871826171875,0.638336181640625,0.38092041015625,0.47747802734375,0.79266357421875,
    0.6009521484375,0.6553955078125,0.750701904296875,0.63189697265625,0.006561279296875,0.949493408203125,0.6456298828125,0.69683837890625,0.626617431640625,0.245697021484375,0.6993408203125,0.79803466796875,0.138916015625,0.057647705078125,0.105255126953125,0.027252197265625,0.627410888671875,0.930267333984375,0.21295166015625,0.257598876953125,0.08233642578125,0.939697265625,0.028289794921875,0.643341064453125,0.900146484375,0.19342041015625,0.713348388671875,0.120025634765625,0.383636474609375,0.330078125,0.0865478515625,0.9044189453125,
    0.24176025390625,0.01959228515625,0.122467041015625,0.99462890625,0.089752197265625,0.463104248046875,0.45196533203125,0.669921875,0.949066162109375,0.893096923828125,0.86212158203125,0.9908447265625,0.74749755859375,0.073211669921875,0.796356201171875,0.299163818359375,0.819000244140625,0.798370361328125,0.854248046875,0.717987060546875,0.40380859375,0.39471435546875,0.291656494140625,0.651580810546875,0.14837646484375,0.2197265625,0.520660400390625,0.285491943359375,0.605499267578125,0.16204833984375,0.60968017578125,0.08648681640625,
    0.734130859375,0.1416015625,0.783294677734375,0.30267333984375,0.399505615234375,0.609527587890625,0.92236328125,0.46331787109375,0.873077392578125,0.048309326171875,0.06396484375,0.87896728515625,0.3326416015625,0.471588134765625,0.901519775390625,0.141387939453125,0.362152099609375,0.924285888671875,0.28460693359375,0.623687744140625,0.45184326171875,0.9825439453125,0.719085693359375,0.980133056640625,0.4981689453125,0.25384521484375,0.867034912109375,0.646270751953125,0.303924560546875,0.8768310546875,0.046875,0.3388671875
]


RNG_FLOATS_BW2 = [
0.44720458984375,0.74212646484375,0.711700439453125,0.3236083984375,0.148712158203125,0.328216552734375,0.12908935546875,0.3133544921875,0.955291748046875,0.369537353515625,0.97088623046875,0.66748046875,0.29473876953125,0.129730224609375,0.180511474609375,0.227752685546875,0.001007080078125,0.903717041015625,0.8575439453125,0.617279052734375,0.8143310546875,0.51763916015625,0.757843017578125,0.740325927734375,0.88116455078125,0.8289794921875,0.793487548828125,0.282440185546875,0.254302978515625,0.22637939453125,0.53289794921875,0.21038818359375,
0.3927001953125,0.1297607421875,0.700653076171875,0.27227783203125,0.661590576171875,0.490264892578125,0.6776123046875,0.49737548828125,0.832427978515625,0.290374755859375,0.0008544921875,0.69622802734375,0.5830078125,0.043731689453125,0.863800048828125,0.960601806640625,0.997283935546875,0.295257568359375,0.61602783203125,0.163604736328125,0.06549072265625,0.12109375,0.263397216796875,0.459503173828125,0.18408203125,0.62872314453125,0.967987060546875,0.783843994140625,0.655853271484375,0.456787109375,0.5482177734375,0.3533935546875,
0.18975830078125,0.27520751953125,0.978668212890625,0.166259765625,0.401031494140625,0.285125732421875,0.89019775390625,0.501708984375,0.311126708984375,0.719024658203125,0.06988525390625,0.4202880859375,0.84783935546875,0.340545654296875,0.961151123046875,0.263763427734375,0.345123291015625,0.944610595703125,0.16357421875,0.155242919921875,0.043212890625,0.85736083984375,0.933013916015625,0.498992919921875,0.58856201171875,0.436279296875,0.681549072265625,0.480560302734375,0.533966064453125,0.57000732421875,0.47760009765625,0.56671142578125,
0.83837890625,0.178466796875,0.545745849609375,0.00555419921875,0.367034912109375,0.712799072265625,0.766845703125,0.32635498046875,0.391387939453125,0.655487060546875,0.177978515625,0.83966064453125,0.0892333984375,0.020172119140625,0.472564697265625,0.137237548828125,0.044525146484375,0.851776123046875,0.50018310546875,0.592193603515625,0.74749755859375,0.7264404296875,0.766693115234375,0.858795166015625,0.0946044921875,0.25164794921875,0.934173583984375,0.372589111328125,0.888641357421875,0.5660400390625,0.321044921875,0.850341796875,
0.33856201171875,0.83953857421875,0.401885986328125,0.7901611328125,0.559600830078125,0.773284912109375,0.30755615234375,0.9713134765625,0.073211669921875,0.099761962890625,0.32513427734375,0.954345703125,0.30718994140625,0.082611083984375,0.398040771484375,0.581024169921875,0.095489501953125,0.016754150390625,0.6258544921875,0.474456787109375,0.1783447265625,0.72833251953125,0.764434814453125,0.538909912109375,0.70220947265625,0.0748291015625,0.725860595703125,0.459930419921875,0.719879150390625,0.44488525390625,0.07855224609375,0.20428466796875,
0.6903076171875,0.2584228515625,0.547088623046875,0.52008056640625,0.978729248046875,0.466583251953125,0.5123291015625,0.43658447265625,0.356597900390625,0.051849365234375,0.5113525390625,0.76434326171875,0.501708984375,0.527862548828125,0.737579345703125,0.595123291015625,0.498016357421875,0.439544677734375,0.54058837890625,0.802032470703125,0.33575439453125,0.863037109375,0.926239013671875,0.539337158203125,0.411376953125,0.90582275390625,0.056610107421875,0.742584228515625,0.027679443359375,0.20654296875,0.7501220703125,0.6285400390625,
0.89361572265625,0.43511962890625,0.981353759765625,0.1953125,0.624420166015625,0.792694091796875,0.38116455078125,0.72216796875,0.241546630859375,0.511749267578125,0.73663330078125,0.2696533203125,0.67279052734375,0.355926513671875,0.491180419921875,0.179534912109375,0.252105712890625,0.120147705078125,0.244384765625,0.574920654296875,0.2197265625,0.13055419921875,0.252105712890625,0.860076904296875,0.22210693359375,0.74462890625,0.926422119140625,0.220550537109375,0.812042236328125,0.85101318359375,0.33575439453125,0.12310791015625,
0.948486328125,0.36962890625,0.704681396484375,0.81585693359375,0.496673583984375,0.751617431640625,0.9140625,0.82806396484375,0.728057861328125,0.479461669921875,0.0009765625,0.47027587890625,0.8204345703125,0.566802978515625,0.658843994140625,0.334259033203125,0.357757568359375,0.058563232421875,0.73724365234375,0.793121337890625,0.83026123046875,0.5308837890625,0.742034912109375,0.501129150390625,0.1343994140625,0.59124755859375,0.335296630859375,0.893829345703125,0.072967529296875,0.3782958984375,0.83544921875,0.68798828125,
0.85491943359375,0.06195068359375,0.717071533203125,0.3817138671875,0.595489501953125,0.343353271484375,0.11102294921875,0.7542724609375,0.816131591796875,0.954986572265625,0.30438232421875,0.3662109375,0.94464111328125,0.160491943359375,0.240570068359375,0.059295654296875,0.814971923828125,0.254791259765625,0.0191650390625,0.456634521484375,0.1673583984375,0.06402587890625,0.396026611328125,0.462493896484375,0.14825439453125,0.4456787109375,0.283233642578125,0.762420654296875,0.810455322265625,0.78839111328125,0.24920654296875,0.32318115234375,
0.6129150390625,0.5120849609375,0.018524169921875,0.89288330078125,0.920867919921875,0.567901611328125,0.9720458984375,0.50079345703125,0.505767822265625,0.938323974609375,0.6468505859375,0.95745849609375,0.04541015625,0.136993408203125,0.236358642578125,0.354644775390625,0.623748779296875,0.708831787109375,0.09014892578125,0.565460205078125,0.23101806640625,0.72998046875,0.214080810546875,0.744171142578125,0.263671875,0.30792236328125,0.770233154296875,0.826324462890625,0.024505615234375,0.081298828125,0.5770263671875,0.0286865234375,
0.22247314453125,0.72003173828125,0.609039306640625,0.349365234375,0.472808837890625,0.425262451171875,0.49713134765625,0.067626953125,0.796966552734375,0.429473876953125,0.02838134765625,0.2440185546875,0.12274169921875,0.496307373046875,0.646209716796875,0.220306396484375,0.784088134765625,0.420684814453125,0.9501953125,0.119598388671875,0.021240234375,0.52874755859375,0.196197509765625,0.346160888671875,0.48065185546875,0.177978515625,0.796295166015625,0.085540771484375,0.715118408203125,0.25701904296875,0.81890869140625,0.80450439453125,
0.68359375,0.685791015625,0.488616943359375,0.75115966796875,0.251312255859375,0.915435791015625,0.686279296875,0.45477294921875,0.689727783203125,0.428436279296875,0.448974609375,0.22589111328125,0.1766357421875,0.238433837890625,0.470123291015625,0.656280517578125,0.295989990234375,0.390350341796875,0.59930419921875,0.119049072265625,0.53802490234375,0.4603271484375,0.342376708984375,0.268463134765625,0.7991943359375,0.05584716796875,0.361419677734375,0.540069580078125,0.882293701171875,0.3155517578125,0.974853515625,0.650634765625,
0.99627685546875,0.40936279296875,0.657257080078125,0.0982666015625,0.256378173828125,0.038421630859375,0.53948974609375,0.6622314453125,0.184051513671875,0.935211181640625,0.90863037109375,0.903076171875,0.20709228515625,0.363372802734375,0.708099365234375,0.662567138671875,0.159454345703125,0.617828369140625,0.0374755859375,0.563812255859375,0.7813720703125,0.52471923828125,0.652618408203125,0.511077880859375,0.21929931640625,0.9415283203125,0.465606689453125,0.189910888671875,0.526031494140625,0.25689697265625,0.04486083984375,0.56707763671875,
0.1605224609375,0.8907470703125,0.114959716796875,0.39068603515625,0.488006591796875,0.794219970703125,0.0567626953125,0.69000244140625,0.279937744140625,0.949798583984375,0.4073486328125,0.27557373046875,0.214111328125,0.871124267578125,0.360137939453125,0.239166259765625,0.374481201171875,0.103118896484375,0.26470947265625,0.453887939453125,0.75128173828125,0.721923828125,0.126922607421875,0.074005126953125,0.740966796875,0.83502197265625,0.108856201171875,0.035064697265625,0.646331787109375,0.0810546875,0.0289306640625,0.5538330078125,
0.17633056640625,0.12994384765625,0.861724853515625,0.62841796875,0.946197509765625,0.182830810546875,0.23809814453125,0.5380859375,0.977386474609375,0.472198486328125,0.94512939453125,0.3433837890625,0.19769287109375,0.761688232421875,0.426239013671875,0.386077880859375,0.941070556640625,0.846221923828125,0.281005859375,0.789276123046875,0.44775390625,0.05194091796875,0.765289306640625,0.957244873046875,0.36419677734375,0.736328125,0.291168212890625,0.075531005859375,0.243194580078125,0.78802490234375,0.92706298828125,0.61090087890625,
0.043701171875,0.126953125,0.897552490234375,0.81146240234375,0.630950927734375,0.204254150390625,0.08349609375,0.20648193359375,0.276397705078125,0.502410888671875,0.52197265625,0.10650634765625,0.1578369140625,0.035064697265625,0.906402587890625,0.103302001953125,0.859222412109375,0.847137451171875,0.08636474609375,0.569976806640625,0.87078857421875,0.5147705078125,0.567718505859375,0.160797119140625,0.0889892578125,0.64544677734375,0.012542724609375,0.311309814453125,0.316619873046875,0.3778076171875,0.7392578125,0.73828125,
0.76263427734375,0.88177490234375,0.222442626953125,0.9398193359375,0.542266845703125,0.858489990234375,0.59295654296875,0.6951904296875,0.176971435546875,0.040435791015625,0.13787841796875,0.56494140625,0.09454345703125,0.691253662109375,0.800628662109375,0.390838623046875,0.128936767578125,0.105865478515625,0.6807861328125,0.795989990234375,0.0203857421875,0.11041259765625,0.534210205078125,0.684661865234375,0.91534423828125,0.5623779296875,0.272979736328125,0.742401123046875,0.866607666015625,0.85040283203125,0.46551513671875,0.93597412109375,
0.3331298828125,0.3944091796875,0.836395263671875,0.01348876953125,0.680145263671875,0.145538330078125,0.7664794921875,0.00421142578125,0.679107666015625,0.086273193359375,0.7928466796875,0.71868896484375,0.0078125,0.730255126953125,0.108917236328125,0.248687744140625,0.750213623046875,0.622406005859375,0.06427001953125,0.467315673828125,0.89654541015625,0.8388671875,0.664764404296875,0.528839111328125,0.84326171875,0.48712158203125,0.072479248046875,0.368804931640625,0.893157958984375,0.205810546875,0.1058349609375,0.2039794921875,
0.75518798828125,0.66485595703125,0.739410400390625,0.032470703125,0.044586181640625,0.065399169921875,0.60406494140625,0.133544921875,0.782806396484375,0.639923095703125,0.48687744140625,0.5677490234375,0.89764404296875,0.152069091796875,0.831268310546875,0.676849365234375,0.723052978515625,0.396759033203125,0.23681640625,0.583953857421875,0.499267578125,0.70013427734375,0.959381103515625,0.693328857421875,0.87274169921875,0.419677734375,0.411041259765625,0.190521240234375,0.396270751953125,0.44403076171875,0.66021728515625,0.54229736328125,
0.02880859375,0.693115234375,0.931488037109375,0.99676513671875,0.635589599609375,0.618072509765625,0.105712890625,0.08319091796875,0.488067626953125,0.701385498046875,0.219970703125,0.11212158203125,0.7640380859375,0.956695556640625,0.967681884765625,0.675323486328125,0.047454833984375,0.428924560546875,0.19842529296875,0.145904541015625,0.82855224609375,0.6942138671875,0.418060302734375,0.178131103515625,0.0037841796875,0.36004638671875,0.288665771484375,0.207550048828125,0.375946044921875,0.5650634765625,0.128662109375,0.950927734375,
0.15399169921875,0.47918701171875,0.412628173828125,0.9063720703125,0.453155517578125,0.803558349609375,0.27142333984375,0.8531494140625,0.794891357421875,0.270660400390625,0.99212646484375,0.351806640625,0.60699462890625,0.144134521484375,0.518157958984375,0.244110107421875,0.723419189453125,0.718902587890625,0.9490966796875,0.153167724609375,0.8843994140625,0.82110595703125,0.040802001953125,0.983245849609375,0.23638916015625,0.3082275390625,0.705352783203125,0.419891357421875,0.832183837890625,0.56890869140625,0.51116943359375,0.42987060546875,
0.1307373046875,0.0230712890625,0.182830810546875,0.76129150390625,0.497283935546875,0.621856689453125,0.1011962890625,0.44342041015625,0.703277587890625,0.347747802734375,0.8033447265625,0.28680419921875,0.426513671875,0.714385986328125,0.482696533203125,0.383209228515625,0.750946044921875,0.266693115234375,0.48883056640625,0.605743408203125,0.66680908203125,0.080810546875,0.827606201171875,0.108673095703125,0.570556640625,0.26422119140625,0.661102294921875,0.827545166015625,0.764984130859375,0.45556640625,0.8077392578125,0.9791259765625,
0.95904541015625,0.32476806640625,0.242095947265625,0.5615234375,0.767974853515625,0.072967529296875,0.59503173828125,0.85400390625,0.213226318359375,0.932647705078125,0.65362548828125,0.9171142578125,0.22259521484375,0.667449951171875,0.861297607421875,0.092620849609375,0.130035400390625,0.072296142578125,0.817626953125,0.503631591796875,0.17578125,0.47332763671875,0.778472900390625,0.554412841796875,0.00628662109375,0.22802734375,0.155914306640625,0.430511474609375,0.174346923828125,0.22503662109375,0.01837158203125,0.59869384765625,
0.638916015625,0.38427734375,0.590423583984375,0.30706787109375,0.265228271484375,0.156890869140625,0.7529296875,0.08489990234375,0.324737548828125,0.025360107421875,0.54296875,0.24273681640625,0.9952392578125,0.003326416015625,0.653961181640625,0.372344970703125,0.860687255859375,0.135711669921875,0.93548583984375,0.846832275390625,0.41131591796875,0.9986572265625,0.893402099609375,0.320465087890625,0.5435791015625,0.19964599609375,0.189788818359375,0.228790283203125,0.060272216796875,0.8773193359375,0.14306640625,0.28857421875,
0.17034912109375,0.20159912109375,0.227813720703125,0.9979248046875,0.989044189453125,0.873626708984375,0.57489013671875,0.1361083984375,0.037811279296875,0.625885009765625,0.47137451171875,0.263671875,0.74444580078125,0.722015380859375,0.860687255859375,0.222381591796875,0.942901611328125,0.456939697265625,0.8424072265625,0.635345458984375,0.3734130859375,0.65679931640625,0.172393798828125,0.406829833984375,0.18243408203125,0.1790771484375,0.762725830078125,0.222381591796875,0.422760009765625,0.41241455078125,0.18182373046875,0.04876708984375,
0.5533447265625,0.7767333984375,0.154266357421875,0.63409423828125,0.939422607421875,0.223175048828125,0.0609130859375,0.00762939453125,0.352447509765625,0.734222412109375,0.4388427734375,0.97991943359375,0.47021484375,0.823516845703125,0.481475830078125,0.642730712890625,0.376678466796875,0.035980224609375,0.53839111328125,0.869171142578125,0.06207275390625,0.44775390625,0.615447998046875,0.813507080078125,0.9228515625,0.16632080078125,0.874725341796875,0.411285400390625,0.261810302734375,0.830322265625,0.1346435546875,0.8792724609375,
0.78790283203125,0.10968017578125,0.369781494140625,0.215576171875,0.116363525390625,0.205535888671875,0.21099853515625,0.699462890625,0.268646240234375,0.350372314453125,0.44537353515625,0.3914794921875,0.17254638671875,0.307830810546875,0.516326904296875,0.633392333984375,0.162017822265625,0.872833251953125,0.0234375,0.548309326171875,0.477294921875,0.37152099609375,0.222564697265625,0.540496826171875,0.76483154296875,0.161376953125,0.525787353515625,0.795501708984375,0.577423095703125,0.13104248046875,0.00152587890625,0.78009033203125,
0.8740234375,0.200439453125,0.874359130859375,0.74237060546875,0.519866943359375,0.820709228515625,0.025146484375,0.21160888671875,0.786407470703125,0.474334716796875,0.490966796875,0.49835205078125,0.8514404296875,0.174957275390625,0.965240478515625,0.194366455078125,0.298919677734375,0.967498779296875,0.29754638671875,0.672760009765625,0.61907958984375,0.4281005859375,0.993743896484375,0.587799072265625,0.7083740234375,0.16424560546875,0.715911865234375,0.375030517578125,0.369598388671875,0.3145751953125,0.782470703125,0.751220703125,
0.81170654296875,0.04901123046875,0.667999267578125,0.2144775390625,0.149932861328125,0.068695068359375,0.50335693359375,0.5440673828125,0.905731201171875,0.106109619140625,0.57562255859375,0.300537109375,0.50689697265625,0.424896240234375,0.828216552734375,0.325653076171875,0.787384033203125,0.319976806640625,0.3607177734375,0.242523193359375,0.4874267578125,0.61749267578125,0.928985595703125,0.955413818359375,0.75347900390625,0.1749267578125,0.445098876953125,0.149871826171875,0.638336181640625,0.38092041015625,0.47747802734375,0.79266357421875,
0.6009521484375,0.6553955078125,0.750701904296875,0.63189697265625,0.006561279296875,0.949493408203125,0.6456298828125,0.69683837890625,0.626617431640625,0.245697021484375,0.6993408203125,0.79803466796875,0.138916015625,0.057647705078125,0.105255126953125,0.027252197265625,0.627410888671875,0.930267333984375,0.21295166015625,0.257598876953125,0.08233642578125,0.939697265625,0.028289794921875,0.643341064453125,0.900146484375,0.19342041015625,0.713348388671875,0.120025634765625,0.383636474609375,0.330078125,0.0865478515625,0.9044189453125,
0.24176025390625,0.01959228515625,0.122467041015625,0.99462890625,0.089752197265625,0.463104248046875,0.45196533203125,0.669921875,0.949066162109375,0.893096923828125,0.86212158203125,0.9908447265625,0.74749755859375,0.073211669921875,0.796356201171875,0.299163818359375,0.819000244140625,0.798370361328125,0.854248046875,0.717987060546875,0.40380859375,0.39471435546875,0.291656494140625,0.651580810546875,0.14837646484375,0.2197265625,0.520660400390625,0.285491943359375,0.605499267578125,0.16204833984375,0.60968017578125,0.08648681640625,
0.734130859375,0.1416015625,0.783294677734375,0.30267333984375,0.399505615234375,0.609527587890625,0.92236328125,0.46331787109375,0.873077392578125,0.048309326171875,0.06396484375,0.87896728515625,0.3326416015625,0.471588134765625,0.901519775390625,0.141387939453125,0.362152099609375,0.924285888671875,0.28460693359375,0.623687744140625,0.45184326171875,0.9825439453125,0.719085693359375,0.980133056640625,0.4981689453125,0.25384521484375,0.867034912109375,0.646270751953125,0.303924560546875,0.8768310546875,0.046875,0.3388671875
]


def render_square(x, y, z, color=(0.5, 0.5, 0.5, 1.0), size=2):
    glColor4f(*color)
    glLineWidth(2.0)
    size = 1
    glBegin(GL_TRIANGLE_FAN)
    glVertex3f(x - size, y - size, z)
    glVertex3f(x + size, y - size, z)
    glVertex3f(x + size, y + size, z)
    glVertex3f(x - size, y + size, z)
    glEnd()


def render_square2(x, y, z, color=(0.5, 0.5, 0.5, 1.0), size=2):
    glColor4f(*color)
    glLineWidth(2.0)
    size = 1
    glBegin(GL_TRIANGLE_FAN)
    glVertex3f(x - size, z, y - size)
    glVertex3f(x + size, z, y - size)
    glVertex3f(x + size, z, y + size)
    glVertex3f(x - size, z, y + size)
    glEnd()


def signed(val1):
    assert -0x80000000 <= val1 <= 0x7FFFFFFF
    if val1 >= 0:
        return val1
    else:
        return 2**32 + val1


class Random(object):
    def __init__(self):
        self.b = 1024
        self.currseed = 0

    def seed(self, value):
        self.currseed = signed(value % 1024)
        return self.currseed

    def randfloat(self, value):
        r9 = self.currseed
        r0 = (r9 + 1) % self.b
        r11 = r0 + 1
        self.currseed = r11
        # load random float from r9+r10 into f0
        rng_float = RNG_FLOATS[r0]

        return value * rng_float

    def randint(self, value):
        return int(self.randfloat(value))


class SceneryComponent(object):
    def __init__(self, x, y, mtx, modeltype):
        self.init = False
        self.x = x
        self.y = y
        self.mtx = mtx
        self.modeltype = modeltype


def get_angles(a_mtx):
    mtx = a_mtx.reshape((4, 4), order="F")
    if mtx[0][2] < 1:
        if mtx[0][2] > -1:
            #print("A")
            theta_Y = math.asin(mtx[0][2])
            theta_X = math.atan2(-mtx[1][2], mtx[2][2])
            theta_Z = math.atan2(-mtx[0][1], mtx[0][0])
        else:
            #print("B")
            theta_Y = -math.pi/2
            theta_X = -math.atan2(mtx[1][0], mtx[1][1])
            theta_Z = 0
    else:
        #print("C")
        theta_Y = +math.pi / 2
        theta_X = math.atan2(mtx[1][0], mtx[1][1])
        theta_Z = 0

    return theta_X, theta_Y, theta_Z


class SceneryHandler(object):
    def __init__(self):
        self.components: list[tuple[BattalionObject, list[SceneryComponent]]] = []
        self.rng = Random()
        self.rng2 = Random()
        self.cluster_dirty = []

        self.do_rebuild = True

    def set_cluster_dirty(self, obj):
        if obj not in self.cluster_dirty:
            self.cluster_dirty.append(obj)

    def set_scenery(self, level: "BattalionLevelFile", is_visible, is_bw2):
        self.components = []

        if isinstance(level, list):
            scenery = level
        else:
            if "cSceneryCluster" in level.category:
                scenery = level.category["cSceneryCluster"].values()
            else:
                scenery = []

        for obj in scenery:
            obj: SceneryCluster

            if True: #self.do_rebuild or obj in self.cluster_dirty or obj.mBase in self.cluster_dirty:
                if is_visible(obj.type, obj):
                    components = self.generate_components(
                        is_bw2,
                        obj
                    )
                    #obj._components = components
                    self.components.extend(components)
        self.do_rebuild = False
        self.cluster_dirty = []

    def generate_components(self, is_bw2, bw_object: "SceneryCluster"):
        base: BattalionObject = bw_object.mBase
        pos: BWMatrix = bw_object.getmatrix()
        height = bw_object.height
        scene_components = []

        if bw_object.mBase is None:
            return []

        if bw_object.mBase.ObjFlags & 2048:
            components = self.generate_line(bw_object, bw_object.mBase)
        else:
            components = self.generate_area(is_bw2, bw_object, bw_object.mBase)

        return components

    def generate_line(self,
                      scenery: "SceneryCluster",
                      base: "SceneryClusterBase"):
        objmtx = scenery.Mat

        self.rng.seed(scenery.Seed)
        self.rng2.seed(scenery.Seed)
        start = 0
        total_components_count = 0
        base_angle = math.atan2(objmtx.mtx[8], objmtx.mtx[10])

        components = []

        flags = base.ObjFlags

        if start < base.MaxLength:
            while start < base.MaxLength:
                self.rng.randfloat(base.MaxSize)
                self.rng.randfloat(base.MaxScnComponentSize)
                self.rng.randfloat(base.MaxUsedTypes)

                total_components_count += 1
                dist = self.rng.randfloat(base.MaxSep)
                start += base.MinSep + dist

            self.rng.seed(scenery.Seed)

            start = 0
            i = 0
            while start < base.MaxLength:
                i += 1
                randsize = self.rng.randfloat(base.MaxSize) - base.MaxSize / 2.0
                compsize = self.rng.randfloat(base.MaxScnComponentSize)
                totalcompsize = base.MinScnComponentSize + compsize

                randtype = int(self.rng.randfloat(base.MaxUsedTypes))
                x = randsize
                y = -start

                # Transform line positions by object angle
                rotated = objmtx.transform_vec(
                    x,
                    0,
                    y, w=0.0)

                x = rotated[0]
                y = rotated[2]

                mtx = BWMatrix.unit_matrix()
                #BWMatrix.static_rotate_x(mtx.mtx,
                #                         math.radians(90))

                if flags & 0x80 == 0:  # Random angles
                    if flags & 0x100 == 0:  # 90 degree angles
                        BWMatrix.static_rotate_y(mtx.mtx,
                                                 base_angle + math.radians(base.ScnComponentAngle))
                    else:
                        # set angle to a random 90 degree angle
                        BWMatrix.static_rotate_y(mtx.mtx,
                                                 self.rng2.randint(4) * pi / 2)
                else:
                    # set angle to a random 360 degree angle
                    BWMatrix.static_rotate_y(mtx.mtx,
                                             self.rng2.randfloat(2 * pi))

                if flags & 0x400:
                    mtx.scale(totalcompsize)

                mtx.set_position(
                    objmtx.x + x,
                    0,
                    objmtx.z + y,
                )

                dist = self.rng.randfloat(base.MaxSep)
                start += base.MinSep + dist

                model = base.Element[randtype]
                if model is not None:
                    modelname = model.mName
                else:
                    modelname = None

                component = SceneryComponent(x, y, mtx, modelname)

                components.append(component)
                if len(components) == 255:
                    break  # Safety against spawning too many components

        return components

    def generate_area(self,
                      is_bw2,
                      scenery: "SceneryCluster",
                      base: "SceneryClusterBase"):

        objmtx = scenery.Mat

        self.rng.seed(scenery.Seed)
        self.rng2.seed(scenery.Seed)
        total_components_count = 0
        base_angle = math.atan2(objmtx.mtx[8], objmtx.mtx[10])

        components = []

        flags = base.ObjFlags

        per_type_count = []
        for i in range(base.MaxUsedTypes):
            total_components_count += base.NumOfElement[i]
            per_type_count.append(0)

        minSep = base.MinSep

        if base.mbHonourSpacingOverNumber != 0:
            attempts = 0xF
        else:
            attempts = 5

        square = flags & 4096

        for i in range(total_components_count):
            no_more_retries = True

            for j in range(attempts + 1):
                #print("\n==========")
                #print("Component", i, "attempt", j)
                if square:
                    component_x = self.rng.randfloat(base.MaxSize) - base.MaxSize / 2.0

                    component_y = self.rng.randfloat(base.MaxLength) - base.MaxLength / 2.0
                else:
                    # print("Input", base.MaxSize * 0.5, "seed", self.rng.currseed)
                    dist = self.rng.randfloat(base.MaxSize * 0.5)
                    # print("Output", dist, "seed", self.rng.currseed)

                    angle = self.rng.randfloat(2 * pi)

                    s_x = sin(angle)
                    s_y = cos(angle)
                    component_y = s_y * 0 - s_x * dist
                    component_x = s_x * 0 + s_y * dist

                if is_bw2 and base.mbUseMatrix:
                    rotated = objmtx.transform_vec(
                        component_x,
                        0,
                        component_y, w=0.0)

                    component_x = rotated[0]
                    component_y = rotated[2]

                no_more_retries = True

                # Keep trying until we can place a component at least minSep apart
                if component_x ** 2 + component_y ** 2 < base.MaxSize ** 2 and i > 0:
                    for k in range(min(i, len(components))):
                        diffx = component_x - components[k].x
                        diffy = component_y - components[k].y

                        if diffx ** 2 + diffy ** 2 < minSep ** 2:
                            no_more_retries = False
                            break

                if no_more_retries:
                    break

            if no_more_retries or base.mbHonourSpacingOverNumber == 0:
                randtype = None
                while True:
                    randtype = int(self.rng.randfloat(base.MaxUsedTypes)) & 0xFF

                    # If the amount of elements of that kind placed exceeds number of elements,
                    # get new number
                    if base.NumOfElement[randtype] <= per_type_count[randtype]:
                        continue
                    break
                assert randtype is not None
                per_type_count[randtype] += 1

                mtx = BWMatrix.unit_matrix()
                #BWMatrix.static_rotate_x(mtx.mtx,
                #                         math.radians(90))

                if flags & 0x80 == 0:  # Random angles
                    if flags & 0x100 == 0:  # 90 degree angles
                        # add component angle onto scenery angle
                        BWMatrix.static_rotate_y(mtx.mtx,
                                                 base_angle + math.radians(base.ScnComponentAngle))
                    else:
                        # set angle to a random 90 degree angle
                        BWMatrix.static_rotate_y(mtx.mtx,
                                                 self.rng2.randint(4) * pi / 2)
                else:
                    # set angle to a random 360 degree angle
                    BWMatrix.static_rotate_y(mtx.mtx,
                                             self.rng2.randfloat(2 * pi))

                if flags & 0x400:
                    size = self.rng.randfloat(base.MaxScnComponentSize - base.MinScnComponentSize)
                    mtx.scale(base.MinScnComponentSize + size)

                mtx.set_position(
                    objmtx.x + component_x,
                    0,
                    objmtx.z + component_y,
                )

                model = base.Element[randtype]
                if model is not None:
                    modelname = model.mName
                else:
                    modelname = None

                component = SceneryComponent(component_x, component_y, mtx, modelname)
                components.append(component)
                if len(components) == 255:
                    break  # Safety against too much scenery

        return components


class Plugin(object):
    def __init__(self):
        self.name = "Scenery Render"
        self.actions = []#,
                        #("Unit Viewer Test", self.testfunc),
                        #,
                        #("Edit Window Mass Test", self.neweditwindowtest)]
        print("I have been initialized")
        self.opengl = None
        self.newaddwindow: None = None
        self.gizmowidget = None
        self.lua_find_window = None
        self.editwindows = []

        self.scenery_rendered = []

        self.scenery = SceneryHandler()
        self.rng = Random()

        testrng = Random()
        testrng.currseed = 144
        print("===")
        for val in (8.0, 6.283186, 8.000):
            print(testrng.randfloat(val), testrng.currseed)

    def select_update(self, editor: "bw_editor.LevelEditor"):
        objects = editor.level_view.selected
        self.scenery_rendered = []
        for obj in editor.level_view.selected:
            if obj.type == "cSceneryCluster":
                self.scenery_rendered.append(obj)

    def render_post2(self, viewer: "bw_widgets.BolMapViewer"):
        print("======")

        if viewer.level_file is None \
                or "cSceneryCluster" not in viewer.level_file.category:
            return

        self.scenery.set_scenery(viewer.level_file)

        glActiveTexture(GL_TEXTURE0)
        glEnable(GL_TEXTURE_2D)
        glEnable(GL_DEPTH_TEST)
        glEnable(GL_ALPHA_TEST)
        glAlphaFunc(GL_GEQUAL, 0.5)
        glDisable(GL_BLEND)

        for i, component in enumerate(self.scenery.components):
            # print(i, component.x, component.y, component.type)
            glPushMatrix()
            try:
                x, y, z = component.mtx.x, component.mtx.y, component.mtx.z
                height = viewer.bwterrain.check_height(x, y)
                component.mtx.mtx[14] = height
                """print(component.mtx.mtx[0:4])
                print(component.mtx.mtx[4:8])
                print(component.mtx.mtx[8:12])
                print(component.mtx.mtx[12:16])"""
                glMultMatrixf(component.mtx.mtx)
                glScalef(-1.0, -1.0, -1.0)
                # render_square(component.x+pos.x, component.y+pos.z, height+1)
                # render_square(0, 0, 0)
                if component.modeltype is not None:
                    viewer.bwmodelhandler.render_model_inplace(
                        component.modeltype
                    )
            except Exception as err:
                print(err)
            glPopMatrix()

        glDisable(GL_TEXTURE_2D)

    def render_post_(self, viewer: "bw_widgets.BolMapViewer"):
        print("======")

        if viewer.level_file is None \
                or "cSceneryCluster" not in viewer.level_file.category:
            return

        is_bw2 = viewer.level_file.is_bw2()

        for sceneryid, scenery in viewer.level_file.category["cSceneryCluster"].items():
            scenery: BattalionObject
            base: BattalionObject = scenery.mBase
            pos: BWMatrix = scenery.getmatrix()
            height = scenery.height
            scene_components = []

            base_angle = math.atan2(pos.mtx[8], pos.mtx[10])

            flags = base.ObjFlags
            if flags & 2048:
                # Draw Line
                self.rng.seed(scenery.Seed)
                start = 0
                total_components_count = 0

                if start < base.MaxLength:
                    while start < base.MaxLength:
                        self.rng.randfloat(base.MaxSize)
                        self.rng.randfloat(base.MaxScnComponentSize)
                        self.rng.randfloat(base.MaxUsedTypes)

                        total_components_count += 1
                        dist = self.rng.randfloat(base.MaxSep)
                        start += base.MinSep + dist

                    scene_components = [SceneryComponent() for i in range(total_components_count)]

                    self.rng.seed(scenery.Seed)

                    start = 0
                    i = 0
                    while start < base.MaxLength:
                        curr_component = scene_components[i]
                        i += 1
                        randsize = self.rng.randfloat(base.MaxSize) - base.MaxSize/2.0
                        compsize = self.rng.randfloat(base.MaxScnComponentSize)
                        totalcompsize = base.MinScnComponentSize + compsize

                        randtype = int(self.rng.randfloat(base.MaxUsedTypes))
                        #print("Type:", randtype)
                        curr_component.type = randtype
                        curr_component.x = randsize
                        curr_component.y = -start

                        # Transform line positions by object angle
                        rotated = pos.transform_vec(
                            curr_component.x,
                            0,
                            curr_component.y, w=0.0)

                        curr_component.x = rotated[0]
                        curr_component.y = rotated[2]

                        curr_component.mtx = BWMatrix.unit_matrix()
                        BWMatrix.static_rotate_x(curr_component.mtx.mtx,
                                                 math.radians(90))

                        if flags & 0x80 == 0:  # Random angles
                            if flags & 0x100 == 0:  # 90 degree angles
                                BWMatrix.static_rotate_y(curr_component.mtx.mtx,
                                                         base_angle + math.radians(base.ScnComponentAngle))
                            else:
                                # set angle to a random 90 degree angle
                                BWMatrix.static_rotate_y(curr_component.mtx.mtx,
                                                         random.randint(0, 3)*pi/2)
                        else:
                            # set angle to a random 360 degree angle
                            BWMatrix.static_rotate_y(curr_component.mtx.mtx,
                                                     random.random()*2*pi)

                        if flags & 0x400:
                            curr_component.mtx.scale(totalcompsize)

                        curr_component.mtx.set_position(
                            pos.x + curr_component.x,
                            pos.z + curr_component.y,
                            0,
                        )

                        dist = self.rng.randfloat(base.MaxSep)
                        start += base.MinSep + dist
                        curr_component.init = True
            else:
                total_components_count = 0
                auStack_a0 = []
                for i in range(base.MaxUsedTypes):
                    total_components_count += base.NumOfElement[i]
                    auStack_a0.append(0)
                scene_components = [SceneryComponent(None, None, None, None) for i in range(total_components_count)]


                self.rng.seed(scenery.Seed)
                minSep = base.MinSep

                if base.mbHonourSpacingOverNumber != 0:
                    attempts = 0xF
                else:
                    attempts = 5

                square = flags & 4096

                for i in range(total_components_count):
                    curr_component:SceneryComponent = scene_components[i]
                    #Draw Circle

                    for j in range(attempts+1):
                        print("\n==========")
                        print("Component", i, "attempt", j)
                        if square:
                            x = self.rng.randfloat(base.MaxSize)
                            curr_component.x = x - base.MaxSize/2.0

                            y = self.rng.randfloat(base.MaxLength)
                            curr_component.y = y - base.MaxLength / 2.0

                        else:
                            #print("Input", base.MaxSize * 0.5, "seed", self.rng.currseed)
                            dist = self.rng.randfloat(base.MaxSize * 0.5)
                            #print("Output", dist, "seed", self.rng.currseed)

                            curr_component.dist = dist
                            curr_component.val4 = 0
                            curr_component.val8 = 0
                            curr_component.valC = 1.0

                            angle = self.rng.randfloat(2*pi)

                            s_x = sin(angle)
                            s_y = cos(angle)
                            curr_component.y = s_y * 0 - s_x * dist
                            curr_component.x = s_x * 0 + s_y * dist

                        if is_bw2:
                            rotated = pos.transform_vec(
                                curr_component.x,
                                0,
                                curr_component.y, w=0.0)

                            curr_component.x = rotated[0]
                            curr_component.y = rotated[2]

                        var1 = True

                        # Keep trying until we can place a component at least minSep apart
                        if curr_component.x**2 + curr_component.y**2 < base.MaxSize**2 and i > 0:
                            for k in range(i):
                                diffx = curr_component.x - scene_components[k].x
                                diffy = curr_component.y - scene_components[k].y

                                if diffx**2 + diffy**2 < minSep**2:
                                    var1 = False
                                    break

                        if var1:
                            break

                    if var1 or base.mbHonourSpacingOverNumber == 0:
                        randtype = None
                        while True:
                            randtype = int(self.rng.randfloat(base.MaxUsedTypes)) & 0xFF

                            # If the amount of elements of that kind placed exceeds number of elements,
                            # get new number
                            if base.NumOfElement[randtype] <= auStack_a0[randtype]:
                                continue
                            break

                        auStack_a0[randtype] += 1
                        curr_component.type = randtype

                        curr_component.mtx = BWMatrix.unit_matrix()
                        BWMatrix.static_rotate_x(curr_component.mtx.mtx,
                                                 math.radians(90))

                        if flags & 0x80 == 0:  # Random angles
                            if flags & 0x100 == 0:  # 90 degree angles
                                # add component angle onto scenery angle
                                BWMatrix.static_rotate_y(curr_component.mtx.mtx,
                                                         base_angle + math.radians(base.ScnComponentAngle))
                            else:
                                # set angle to a random 90 degree angle
                                BWMatrix.static_rotate_y(curr_component.mtx.mtx,
                                                         random.randint(0, 3) * pi / 2)
                        else:
                            # set angle to a random 360 degree angle
                            BWMatrix.static_rotate_y(curr_component.mtx.mtx,
                                                     random.random() * 2 * pi)

                        if flags & 0x400:
                            size = self.rng.randfloat(base.MaxScnComponentSize - base.MinScnComponentSize)
                            curr_component.mtx.scale(base.MinScnComponentSize + size)

                        curr_component.mtx.set_position(
                            pos.x + curr_component.x,
                            pos.z + curr_component.y,
                            0,
                        )
                        curr_component.init = True

            glActiveTexture(GL_TEXTURE0)
            glEnable(GL_TEXTURE_2D)
            glEnable(GL_DEPTH_TEST)
            glEnable(GL_ALPHA_TEST)
            glAlphaFunc(GL_GEQUAL, 0.5)
            glDisable(GL_BLEND)

            for i, component in enumerate(scene_components):
                if not component.init:
                    continue

                #print(i, component.x, component.y, component.type)
                glPushMatrix()
                try:
                    x, y, z = component.mtx.x, component.mtx.y, component.mtx.z
                    height = viewer.bwterrain.check_height(x, y)
                    component.mtx.mtx[14] = height
                    """print(component.mtx.mtx[0:4])
                    print(component.mtx.mtx[4:8])
                    print(component.mtx.mtx[8:12])
                    print(component.mtx.mtx[12:16])"""
                    glMultMatrixf(component.mtx.mtx)
                    glScalef(-1.0, -1.0, -1.0)
                    #render_square(component.x+pos.x, component.y+pos.z, height+1)
                    #render_square(0, 0, 0)
                    model = scenery.mBase.Element[component.type]
                    if model is not None:
                        viewer.bwmodelhandler.render_model_inplace(
                            model.mName
                        )
                except Exception as err:
                    print(err)
                glPopMatrix()

            glDisable(GL_TEXTURE_2D)






    def unload(self):
        pass